name: CI - Backend Tests

on:
  push:
    branches: [staging, develop]  # Run tests on staging and develop
  pull_request:
    branches: [main, staging, develop]  # Run tests on PRs

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: chefoodai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy
      
      - name: Run Linting
        run: |
          echo "üîç Running code quality checks..."
          black --check .
          flake8 . --max-line-length=100 --ignore=E203,W503
      
      - name: Run Type Checking
        run: |
          echo "üìù Running type checks..."
          mypy . --ignore-missing-imports || true
      
      - name: Run Tests
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/chefoodai_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
          JWT_SECRET: test-secret
        run: |
          echo "üß™ Running tests..."
          pytest tests/ -v --cov=. --cov-report=term-missing --cov-report=xml
      
      - name: Upload Coverage
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Build Docker Image
        run: |
          echo "üê≥ Testing Docker build..."
          docker build -t chefoodai-backend:test .
      
      - name: Summary
        run: |
          echo "‚úÖ CI Pipeline Complete!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "Note: This branch does not auto-deploy to GCP."
          echo "To deploy, merge to 'main' branch."